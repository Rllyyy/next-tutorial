import { PostPreview, IPost } from "../../components/post";

type Props = {
  posts: IPost[];
  error: string;
};

// Generated by https://quicktype.io

function PostsPage({ posts, error }: Props) {
  if (error) {
    return <h1>{error}</h1>;
  }
  return (
    <main className='p-8'>
      <h1 className='heading'>Posts</h1>
      <div>
        {posts?.map((post) => {
          return <PostPreview key={post.id} post={post} />;
        })}
      </div>
    </main>
  );
}

export default PostsPage;

export async function getStaticProps() {
  // Try block to catch any errors thrown by the fetch function
  try {
    // Send a request to the specified URL and get the response
    const response = await fetch("https://jsonplaceholder.typicode.com/posts?_start=0&_limit=3");

    // If the response is successful (status code in the range 200-299)
    if (response.ok) {
      // Parse the response body as JSON
      const data: IPost[] = await response.json();

      // Return the data as props
      return {
        props: {
          posts: data,
        },
      };
    } else {
      // If the response is not successful, return an error message as props
      return {
        props: {
          error: "Error fetching data",
        },
      };
    }
  } catch (error) {
    // If there was an error thrown by the fetch function, return the error message as props
    if (error instanceof Error) {
      return {
        props: {
          error: "error.message",
        },
      };
    }
  }
}
